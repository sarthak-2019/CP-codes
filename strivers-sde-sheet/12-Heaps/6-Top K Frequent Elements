//https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue < pair<int,int> , vector<pair<int,int>> , greater<pair<int,int>> > pq;
        unordered_map <int,int> mp;
        vector <int> ans;
        
        for(auto i:nums)
            mp[i]++;
        
        for(auto i:mp){
            if(pq.size()<k){
                pq.push(make_pair(i.second,i.first));
            }else{
                pq.push(make_pair(i.second,i.first));
                pq.pop();
            }
        }
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
