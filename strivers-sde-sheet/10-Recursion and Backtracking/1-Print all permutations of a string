//https://leetcode.com/problems/permutations/



//Approach 1

class Solution {
public:
    void cal(vector<int>& nums,vector<vector<int>>&ans,vector<int>& freq,vector<int>& temp){
        
        if(nums.size()==temp.size()){
            ans.push_back(temp);
        }
        for(int i=0;i<nums.size();i++){
            if(!freq[i]){
                temp.push_back(nums[i]);
                freq[i]=1;
                cal(nums,ans,freq,temp);
                temp.pop_back();
                freq[i]=0;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        int n=nums.size();
        vector<int>freq(n+2,0);
        vector<int>temp;
        cal(nums,ans,freq,temp);
        return ans;
    }
};
//////////////////////////////////////////////////////////////////////////////////////


//Approach 2

class Solution {
public:
    void cal(int ind,vector<int>& nums,vector<vector<int>>&ans){
        
        if(nums.size()==ind){
            ans.push_back(nums);
        }
        for(int i=ind;i<nums.size();i++){
            swap(nums[ind],nums[i]);
            cal(ind+1,nums,ans);
            swap(nums[ind],nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        int n=nums.size();
        cal(0,nums,ans);
        return ans;
    }
};
