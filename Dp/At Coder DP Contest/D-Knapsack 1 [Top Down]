// dp[n][w] has 2 state-- -
// 1-If we pick the nth item ==value(nth item)+dp(n-1,w-weight(nth item))
// 2-If we not pick the nth item == dp(n-1,w)

const int N = 1e5 + 5, N1 = 102;
int dp[N1][N];
int weight[N1], val[N1];
int cal_dp(int n, int w)
{
  if (n == 1) {
    if (weight[n] <= w)
      return dp[n][w] = val[n];
    else
      return 0;
  }
  if (dp[n][w] != -1)
    return dp[n][w];
  int t1, t2;
  if (w - weight[n] > 0)
    t1 = val[n] + cal_dp(n - 1, w - weight[n]);
  else
    t1 = -2000000000000000000;
  t2 = cal_dp(n - 1, w);
  dp[n][w] = max(t1, t2);
  return dp[n][w];
}
void solve()
{
  int n, w;
  cin >> n >> w;
  for (int i = 1; i <= n; i++) {
    cin >> weight[i] >> val[i];
  }
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= w; j++) {
      dp[i][j] = -1;
    }
  }
  cout << cal_dp(n, w) << endl;
}
