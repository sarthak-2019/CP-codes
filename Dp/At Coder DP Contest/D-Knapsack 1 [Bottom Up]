// dp[n][w] has 2 state-- -
// 1-If we pick the nth item ==value(nth item)+dp(n-1,w-weight(nth item))
// 2-If we not pick the nth item == dp(n-1,w)

const int N = 1e5 + 5, N1 = 102;
int dp[N1][N];
int weight[N1], val[N1];
void solve()
{
  int n, w;
  cin >> n >> w;
  for (int i = 1; i <= n; i++) {
    cin >> weight[i] >> val[i];
  }
  for (int j = 0; j <= w; j++) {
    if (weight[1] <= j) {
      dp[1][j] = val[1];
    }
    else
      dp[1][j] = 0;
  }
  for (int i = 2; i <= n; i++) {
    for (int j = 1; j <= w; j++) {
      int x = -2000000000000000, y;
      if (weight[i] <= j) {
        x = val[i] + dp[i - 1][j - weight[i]];
      }
      y = dp[i - 1][j];
      dp[i][j] = max(x, y);
    }
  }
  cout << dp[n][w];
}
