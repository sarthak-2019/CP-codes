// dp[n][v]--
// n-nth item   v-Value we can achieve
// dp[n][v]--Minimum weight that we can get from Subset of n items
// dp[n][v] has 2 state-- -
// 1-If we pick the nth item ==wight(nth item)+dp(n-1,v-value(nth item))
// 2-If we not pick the nth item == dp(n-1,v)

const int N = 1e5 + 5, N1 = 102;
int dp[N1][N];
int weight[N1], val[N1];
void solve()
{
  int n, w;
  cin >> n >> w;
  int sum_val = 0;
  for (int i = 1; i <= n; i++) {
    cin >> weight[i] >> val[i];
    sum_val += val[i];
  }
  for (int i = 0; i <= sum_val; i++) {
    dp[1][i] = 2000000000000000;
  }
  dp[1][0] = 0;
  dp[1][val[1]] = weight[1];

  for (int i = 2; i <= n; i++) {
    for (int j = 0; j <= sum_val; j++) {
      dp[i][j] = dp[i - 1][j];
      if (j - val[i] >= 0) {
        dp[i][j] = min(dp[i][j], weight[i] + dp[i - 1][j - val[i]]);
      }
    }
  }
  
  int ans = 0;
  for (int i = 0; i <= sum_val; i++) {
    if (dp[n][i] == -1)
      continue;
    if (dp[n][i] <= w)
      ans = max(ans, i);
  }
  cout << ans << endl;
}
