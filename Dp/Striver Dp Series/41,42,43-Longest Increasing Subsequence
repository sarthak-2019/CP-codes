/https://leetcode.com/problems/longest-increasing-subsequence/


class Solution {
public:
    
    // Solution 1
    
//     static const int N=2505;
//     int dp[N][N];
//     int cal(int ind,int prev_ind,vector<int>& nums){
        
//         if(ind==nums.size())
//             return 0;
        
        
//         if(dp[ind][prev_ind+1]!=-1)
//             return dp[ind][prev_ind+1];
//         int not_take=cal(ind+1,prev_ind,nums);
//         int take=-1;
        
//         if(prev_ind==-1||nums[ind]>nums[prev_ind]){
//             take=1+cal(ind+1,ind,nums);
//         }
//         return dp[ind][prev_ind+1]=max(take,not_take);
//     }
//     int lengthOfLIS(vector<int>& nums) {
//         // memset(dp,-1,sizeof(dp));
//         // return cal(0,-1,nums);
        
//         int n=nums.size();
//         memset(dp,0,sizeof(dp));
        
//         // Second parameter will be in +1 State
        
        
//         for(int i=n-1;i>=0;i--){
            
//             for(int prev_ind=i-1;prev_ind>=-1;prev_ind--){
//                 int not_take=dp[i+1][prev_ind+1];
//                 int take=-1;

//                 if(prev_ind==-1||nums[i]>nums[prev_ind]){
//                     take=1+dp[i+1][i+1];
//                 }
//                 dp[i][prev_ind+1]=max(take,not_take);
//             }
//         }
//         return dp[0][0];
//     }
    
    // Solution 2  [Same complexity but can print LIS]
    
//     int lengthOfLIS(vector<int>& nums) {
//         int n=nums.size();
//         vector<int>dp(n,1);
//         vector<int>hash;
//         vector<int>lis;
//         int max_ind=0;
//         int ans=1;
        
//         for(int i=0;i<n;i++)
//             hash.push_back(i);
   
        
//         for(int i=0;i<n;i++){
            
//             for(int prev=0;prev<i;prev++){
//                 if(nums[prev]<nums[i] && 1+dp[prev]>dp[i]){
//                     dp[i]=1+dp[prev];
//                     hash[i]=prev;
//                 }
//             }
            
//             if(dp[i]>ans){
//                 ans=dp[i];
//                 max_ind=i;
//             }
//         }
        
//         lis.push_back(nums[max_ind]);
        
//         while(hash[max_ind]!=max_ind){
//             max_ind=hash[max_ind];
//             lis.push_back(nums[max_ind]);
//         }
//         // reverse(lis.begin(),lis.end());
//         // for(auto i:lis)
//         //     cout<<i<<" ";
//         return ans;
//     }
    
    // Solution 3 using binary search
    
    
     
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int>help;
        
        help.push_back(nums[0]);
        
        for(int i=1;i<n;i++){
            int size=help.size();
            
            if(help[size-1]<nums[i]){
                 help.push_back(nums[i]);
            }
            else{
                int ind=lower_bound(help.begin(),help.end(),nums[i])-help.begin();
                help[ind]=nums[i];
            }
        }
        return help.size();
    }
    
};
