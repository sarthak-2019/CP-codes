//  https://www.codingninjas.com/codestudio/problems/0-1-knapsack_920542

#include <bits/stdc++.h>
const int N=1e3+5;
int dp[105][N];
int cal(vector<int> weight, vector<int> value, int ind, int maxWeight){
    if(ind<0||maxWeight<=0){
        return 0;
    }
    if(dp[ind][maxWeight]!=-1)
        return dp[ind][maxWeight];
    if(maxWeight-weight[ind]>=0){
        return dp[ind][maxWeight]=max(value[ind]+cal(weight,value,ind-1,maxWeight-weight[ind]),cal(weight,value,ind-1,maxWeight));
    }else
        return dp[ind][maxWeight]=cal(weight,value,ind-1,maxWeight);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    memset(dp,-1,sizeof(dp));
// 	return cal(weight,value,n-1,maxWeight);
    
    for(int i=0;i<=n;i++){
        for(int j=0;j<=maxWeight;j++){
            if(i==0||j==0)
                dp[i][j]=0;
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=maxWeight;j++){
            if(j-weight[i-1]>=0){
        dp[i][j]=max(value[i-1]+dp[i-1][j-weight[i-1]],dp[i-1][j]);
        }else
        dp[i][j]=dp[i-1][j];
        }
    }
    return dp[n][maxWeight];
}
