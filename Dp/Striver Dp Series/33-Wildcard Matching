// https://leetcode.com/problems/wildcard-matching/

class Solution {
public:
	bool f(int i,int j,string& p,string& s,vector<vector<int>>& dp){
		if(i<0 && j<0) return true;
		if(i<0 && j>=0) return false;
		if(j<0 && i>=0){
			for(int k=0;k<=i;k++){
				if(p[k]!='*') return false;
			}
			return true;
		}
		if(dp[i][j]!=-1) return dp[i][j];
//      Match 
		if(p[i]==s[j] || p[i]=='?') return dp[i][j]=f(i-1,j-1,p,s,dp);
		if(p[i]=='*') return dp[i][j]=f(i-1,j,p,s,dp) || f(i,j-1,p,s,dp);
//      NotMatch
		return dp[i][j]=false;
	}

// 	bool isMatch(string s, string p) {
// 		int n=p.size();
// 		int m=s.size();
// 		vector<vector<int>> dp(n+2,vector<int>(m+2,-1));
// 		// return f(n-1,m-1,p,s,dp);
        
        
//         dp[0][0]=1;
        
//         for(int i=1;i<=m;i++)
//             dp[0][i]=0;
        
//         bool f=1;
//         for(int i=1;i<=n;i++){
//             if(p[i-1]!='*')
//                 f=0;
//             if(f)
//                 dp[i][0]=1;
//             else
//                  dp[i][0]=0;
//         }
        
//         for(int i=1;i<=n;i++){
//             for(int j=1;j<=m;j++){
//                 if(p[i-1]==s[j-1]||p[i-1]=='?'){
//                     dp[i][j]=dp[i-1][j-1];
//                 }else if(p[i-1]=='*'){
//                     dp[i][j]=dp[i][j-1]||dp[i-1][j];
//                 }else
//                     dp[i][j]=0;
//             }
//         }
//         return dp[n][m];
// 	}
    
    // Space Optimized
   	bool isMatch(string s, string p) {
		int n=p.size();
		int m=s.size();
		vector<bool> prev(m+1,false),cur(m+1,false);
        prev[0]=1;
        cur[0]=1;
        bool f=1;
        for(int i=1;i<=n;i++){
            
            if(p[i-1]!='*')
                f=0;
            if(f)
                cur[0]=1;
            else
                cur[0]=0;
            
            for(int j=1;j<=m;j++){
                if(p[i-1]==s[j-1]||p[i-1]=='?'){
                    cur[j]=prev[j-1];
                }else if(p[i-1]=='*'){
                    cur[j]=cur[j-1]||prev[j];
                }else
                    cur[j]=0;
            }
            prev=cur;
        }
        return cur[m];
	}
};
