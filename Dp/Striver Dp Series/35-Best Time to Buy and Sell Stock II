//https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

class Solution {
public:
    static const int N=3e4+5;
    int dp[N][2];
    int cal(int ind,int buy,vector<int>& prices,int n){
        
        if(ind==n)
            return 0;
        
        int &val=dp[ind][buy];
        if(val!=-1)
            return val;
        if(buy==1){
            return val=max(-1*prices[ind]+cal(ind+1,0,prices,n),0+cal(ind+1,1,prices,n));
        }else{
            return val=max(prices[ind]+cal(ind+1,1,prices,n),0+cal(ind+1,0,prices,n));
        }
    }
    int maxProfit(vector<int>& prices) {
        // memset(dp,-1,sizeof(dp));
        int n=prices.size();
        // return cal(0,1,prices,n);
        
        dp[n][0]=0;
        dp[n][1]=0;
        
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                int profit=0;
                if(j){
                    profit=max(-1*prices[i]+dp[i+1][0],dp[i+1][1]);
                }else{
                    profit=max(prices[i]+dp[i+1][1],dp[i+1][0]);
                }
                dp[i][j]=profit;
            }
        }
        return dp[0][1];
    }
};
