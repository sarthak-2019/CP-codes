// https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532


#include <bits/stdc++.h>
const int N=1e3+5;
int dp[105][N];
int cal(int ind, int k, vector<int> &arr){
    if(k==0)
        return 1;
    if(ind==-1){
        return 0;
    }
    if(dp[ind][k]!=-1)
        return dp[ind][k];
    if(arr[ind]<=k){
        return dp[ind][k]=cal(ind-1,k-arr[ind],arr)+cal(ind-1,k,arr);
    }else{
        return dp[ind][k]=cal(ind-1,k,arr);
    }
}
int findWays(vector<int> &num, int tar)
{
    sort(num.begin(),num.end());
    reverse(num.begin(),num.end());
    memset(dp,-1,sizeof(dp));
    int n=num.size();
//     return cal(n-1,tar,num);
    
    for(int i=0;i<=n;i++){
        for(int j=0;j<=tar;j++){
            if(j==0){
                dp[i][j]=1;
                continue;
            }
            if(i==0){
                dp[i][j]=0;
            }
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=tar;j++){
            if(j-num[i-1]>=0){
                dp[i][j]=dp[i-1][j-num[i-1]]+dp[i-1][j];
            }else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][tar];
}
