//https://atcoder.jp/contests/dp/tasks/dp_b

#include <bits/stdc++.h>
#define mod             1000000007
#define inf             2000000000000000000
const int N = 1e5 + 5;
int dp[N];
int cal(int n, int k, vector<int> &heights) {
    if (dp[n] != -1)
        return dp[n];
    int mn = inf;
    for (int i = 1; i <= k; i++) {
        if (n - i >= 0) {
            mn = min(mn, cal(n - i, k, heights) + abs(heights[n] - heights[n - i]));
        }
    }
    return dp[n] = mn;
}
int frogJump(int n, int k, vector<int> &heights)
{
    memset(dp, -1, sizeof(dp));
    if (n == 1)
        return 0;
    if (n == 2)
        return abs(heights[0] - heights[1]);
    dp[0] = 0;
    dp[1] = abs(heights[0] - heights[1]);
    return cal(n - 1, k, heights);

}
