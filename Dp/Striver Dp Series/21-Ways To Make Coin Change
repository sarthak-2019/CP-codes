//https://www.codingninjas.com/codestudio/problems/ways-to-make-coin-change_630471

const int N=2e3+5;
#include <bits/stdc++.h>
long dp[15][N];
long cal(int *denominations, int n,int value){
    if(value==0)
        return 1;
    if(n<0)
        return 0;
    if(dp[n][value]!=-1)
        return dp[n][value];
    if(value-denominations[n]>=0){
        return dp[n][value]=cal(denominations,n,value-denominations[n])+cal(denominations,n-1,value);
    }else
        return dp[n][value]=cal(denominations,n-1,value);
}
// long countWaysToMakeChange(int *denominations, int n, int value)
// {
//     memset(dp,-1,sizeof(dp));
// //     return cal(denominations,n-1,value);
    
//     for(int i=0;i<=n;i++){
//         for(int j=0;j<=value;j++){
//             if(j==0){
//                 dp[i][j]=1;
//                 continue;
//             }
//             if(i==0){
//                 dp[i][j]=0;
//             }
//         }
//     }
//     for(int i=1;i<=n;i++){
//         for(int j=1;j<=value;j++){
//             if(j-denominations[i-1]>=0){
//         dp[i][j]=dp[i][j-denominations[i-1]]+dp[i-1][j];
//        }else
//         dp[i][j]=dp[i-1][j];
//         }
//     }
//     return dp[n][value];
// }

// Space Optimization

long countWaysToMakeChange(int *denominations, int n, int value)
{
    vector<long>cur(value+2,0),prev(value+2,0);
    prev[0]=1;
    for(int i=1;i<=n;i++){
        for(int j=0;j<=value;j++){
            if(j-denominations[i-1]>=0){
            cur[j]=cur[j-denominations[i-1]]+prev[j];
          }else
            cur[j]=prev[j];
        }
        prev=cur;
    }
    return cur[value];
}
