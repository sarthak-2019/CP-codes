//https://leetcode.com/problems/distinct-subsequences

class Solution {
public:
    double dp[1005][1005];
    int cal(string s, string t,int n,int m){
         if(m<0)
            return 1;
        if(n<0)
            return 0;
        
        if(dp[n][m]!=-1)
            return dp[n][m];
        if(s[n]==t[m]){
            return dp[n][m]=cal(s,t,n-1,m-1)+cal(s,t,n-1,m);
        }else
            return dp[n][m]=cal(s,t,n-1,m);
    }
//     int numDistinct(string s, string t) {
//         int n=s.length();
//         int m=t.length();
//         memset(dp,-1,sizeof(dp));
        
//         // Gives Time limit Exceeded
//         // return cal(s,t,n-1,m-1);
        
//         for(int i=0;i<=n;i++){
//             for(int j=0;j<=m;j++){
//                 if(j==0){
//                     dp[i][j]=1;
//                     continue;
//                 }else
//                     dp[i][j]=0;
//             }
//         }
//         for(int i=1;i<=n;i++){
//             for(int j=1;j<=m;j++){
//                 if(s[i-1]==t[j-1]){
//                     dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
//                 }else
//                     dp[i][j]=dp[i-1][j];
//             }
//         }
//         return (int) dp[n][m];
//     }
    
    // Space Optimization 
    
    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();
        memset(dp,-1,sizeof(dp));
        
        // Gives Time limit Exceeded
        // return cal(s,t,n-1,m-1);
        
        vector<double>prev(m+2,0),cur(m+2,0);
        prev[0]=1;
        cur[0]=1;
      
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
                    cur[j]=prev[j-1]+prev[j];
                }else
                    cur[j]=prev[j];
            }
            prev=cur;
        }
        return (int) cur[m];
    }
};
